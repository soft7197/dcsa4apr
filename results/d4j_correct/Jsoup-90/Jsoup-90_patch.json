{
    "bug_id": "Jsoup-90",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Jsoup-90_1756721275",
    "patches": [
        {
            "hypothesis": "The method 'looksLikeUtf8' is causing an ArrayIndexOutOfBoundsException because it doesn't check if the next byte is available when iterating over the input array. This happens when the input is shorter than expected for a specific UTF-8 sequence length. We need to ensure that we do not exceed the array bounds while checking for multi-byte UTF-8 sequences.",
            "changes": "- if ((o & 0xE0) == 0xC0) {\n+ if ((o & 0xE0) == 0xC0 && i + 1 < input.length) {\n- } else if ((o & 0xF0) == 0xE0) {\n+ } else if ((o & 0xF0) == 0xE0 && i + 2 < input.length) {\n- } else if ((o & 0xF8) == 0xF0) {\n+ } else if ((o & 0xF8) == 0xF0 && i + 3 < input.length) {",
            "fixed_method": "private static boolean looksLikeUtf8(byte[] input) {\n    int i = 0;\n    // BOM:\n    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n        i = 3;\n    }\n\n    int end;\n    for (int j = input.length; i < j; ++i) {\n        int o = input[i];\n        if ((o & 0x80) == 0) {\n            continue; // ASCII\n        }\n\n        // UTF-8 leading:\n        if ((o & 0xE0) == 0xC0 && i + 1 < input.length) {\n            end = i + 1;\n        } else if ((o & 0xF0) == 0xE0 && i + 2 < input.length) {\n            end = i + 2;\n        } else if ((o & 0xF8) == 0xF0 && i + 3 < input.length) {\n            end = i + 3;\n        } else {\n            return false;\n        }\n\n        while (i < end) {\n            i++;\n            o = input[i];\n            if ((o & 0xC0) != 0x80) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
            "diff": "--- original\n+++ fixed\n@@ -0,0 +1,36 @@\n+private static boolean looksLikeUtf8(byte[] input) {\n+    int i = 0;\n+    // BOM:\n+    if (input.length >= 3 && (input[0] & 0xFF) == 0xEF\n+        && (input[1] & 0xFF) == 0xBB && (input[2] & 0xFF) == 0xBF) {\n+        i = 3;\n+    }\n+\n+    int end;\n+    for (int j = input.length; i < j; ++i) {\n+        int o = input[i];\n+        if ((o & 0x80) == 0) {\n+            continue; // ASCII\n+        }\n+\n+        // UTF-8 leading:\n+        if ((o & 0xE0) == 0xC0 && i + 1 < input.length) {\n+            end = i + 1;\n+        } else if ((o & 0xF0) == 0xE0 && i + 2 < input.length) {\n+            end = i + 2;\n+        } else if ((o & 0xF8) == 0xF0 && i + 3 < input.length) {\n+            end = i + 3;\n+        } else {\n+            return false;\n+        }\n+\n+        while (i < end) {\n+            i++;\n+            o = input[i];\n+            if ((o & 0xC0) != 0x80) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}",
            "file_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
            "method_name": "looksLikeUtf8",
            "class_name": "HttpConnection",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                398,
                399,
                400,
                401,
                402,
                403,
                404,
                405,
                406,
                407,
                408,
                409,
                410,
                411,
                412,
                413,
                414,
                415,
                416,
                417,
                418,
                419,
                420,
                421,
                422,
                423,
                424,
                425,
                426,
                427,
                428,
                429,
                430,
                431,
                432,
                433,
                434
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Jsoup-90_trace.json"
}