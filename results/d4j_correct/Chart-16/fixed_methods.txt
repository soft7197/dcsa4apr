### Fixed patch 
public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,
                                      Comparable[] categoryKeys,
                                      Number[][] starts,
                                      Number[][] ends) {

        if (starts != null && ends != null) {
            this.startData = starts;
            this.endData = ends;

            int seriesCount = starts.length;
            if (seriesCount != ends.length) {
                String errMsg = "DefaultIntervalCategoryDataset: the number "
                    + "of series in the start value dataset does "
                    + "not match the number of series in the end "
                    + "value dataset.";
                throw new IllegalArgumentException(errMsg);
            }
            if (seriesCount > 0) {
                if (seriesKeys != null) {
                    if (seriesKeys.length != seriesCount) {
                        throw new IllegalArgumentException(
                                "The number of series keys does not "
                                + "match the number of series in the data.");
                    }
                    this.seriesKeys = seriesKeys;
                }
                else {
                    this.seriesKeys = generateKeys(seriesCount, "Series ");
                }

                int categoryCount = starts[0].length;
                if (categoryCount != ends[0].length) {
                    String errMsg = "DefaultIntervalCategoryDataset: the "
                                + "number of categories in the start value "
                                + "dataset does not match the number of "
                                + "categories in the end value dataset.";
                    throw new IllegalArgumentException(errMsg);
                }
                if (categoryKeys != null) {
                    if (categoryKeys.length != categoryCount) {
                        throw new IllegalArgumentException(
                                "The number of category keys does not match "
                                + "the number of categories in the data.");
                    }
                    this.categoryKeys = categoryKeys;
                }
                else {
                    this.categoryKeys = generateKeys(categoryCount, "Category ");
                }
            }
            else {
                this.seriesKeys = new Comparable[0];
                this.categoryKeys = new Comparable[0];
            }
        } else {
            this.startData = new Number[0][0];
            this.endData = new Number[0][0];
            this.seriesKeys = new Comparable[0];
            this.categoryKeys = new Comparable[0];
        }
    }
public void setCategoryKeys(Comparable[] categoryKeys) {
    if (categoryKeys == null) {
        throw new IllegalArgumentException("Null 'categoryKeys' argument.");
    }
    if (this.startData.length > 0 && categoryKeys.length != this.startData[0].length) {
        throw new IllegalArgumentException(
                "The number of categories does not match the data.");
    }
    for (int i = 0; i < categoryKeys.length; i++) {
        if (categoryKeys[i] == null) {
            throw new IllegalArgumentException(
                "DefaultIntervalCategoryDataset.setCategoryKeys(): "
                + "null category not permitted.");
        }
    }
    this.categoryKeys = categoryKeys;
    fireDatasetChanged();
}

