{
    "bug_id": "Closure-61",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Closure-61_1756720624",
    "patches": [
        {
            "hypothesis": "The method does not correctly identify certain built-in functions like Math functions as having no side effects, allowing them to be mistakenly treated as having side effects.",
            "changes": [
                "+      if (nameNode.getFirstChild().getType() == Token.NAME && 'Math'.equals(nameNode.getFirstChild().getString())) {",
                "+          return false;",
                "       }"
            ],
            "fixed_method": "static boolean functionCallHasSideEffects(\n    Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Built-in functions with no side effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    if (callNode.hasOneChild()\n        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n              nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    if (callNode.isOnlyModifiesThisCall()\n        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n      return false;\n    }\n\n    // Functions in the \"Math\" namespace have no side effects.\n    if (nameNode.getFirstChild().getType() == Token.NAME && \"Math\".equals(nameNode.getFirstChild().getString())) {\n      return false;\n    }\n\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      if (nameNode.getFirstChild().getType() == Token.REGEXP\n          && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        return false;\n      } else if (nameNode.getFirstChild().getType() == Token.STRING\n          && STRING_REGEXP_METHODS.contains(\n              nameNode.getLastChild().getString())) {\n        Node param = nameNode.getNext();\n        if (param != null &&\n            (param.getType() == Token.STRING\n                || param.getType() == Token.REGEXP))\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
            "diff": "--- original\n+++ fixed\n@@ -0,0 +1,54 @@\n+static boolean functionCallHasSideEffects(\n+    Node callNode, @Nullable AbstractCompiler compiler) {\n+  if (callNode.getType() != Token.CALL) {\n+    throw new IllegalStateException(\n+        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+  }\n+\n+  if (callNode.isNoSideEffectsCall()) {\n+    return false;\n+  }\n+\n+  Node nameNode = callNode.getFirstChild();\n+\n+  // Built-in functions with no side effects.\n+  if (nameNode.getType() == Token.NAME) {\n+    String name = nameNode.getString();\n+    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n+      return false;\n+    }\n+  } else if (nameNode.getType() == Token.GETPROP) {\n+    if (callNode.hasOneChild()\n+        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n+              nameNode.getLastChild().getString())) {\n+      return false;\n+    }\n+\n+    if (callNode.isOnlyModifiesThisCall()\n+        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+      return false;\n+    }\n+\n+    // Functions in the \"Math\" namespace have no side effects.\n+    if (nameNode.getFirstChild().getType() == Token.NAME && \"Math\".equals(nameNode.getFirstChild().getString())) {\n+      return false;\n+    }\n+\n+    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+      if (nameNode.getFirstChild().getType() == Token.REGEXP\n+          && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+        return false;\n+      } else if (nameNode.getFirstChild().getType() == Token.STRING\n+          && STRING_REGEXP_METHODS.contains(\n+              nameNode.getLastChild().getString())) {\n+        Node param = nameNode.getNext();\n+        if (param != null &&\n+            (param.getType() == Token.STRING\n+                || param.getType() == Token.REGEXP))\n+        return false;\n+      }\n+    }\n+  }\n+\n+  return true;\n+}",
            "file_path": "src/com/google/javascript/jscomp/NodeUtil.java",
            "method_name": "functionCallHasSideEffects",
            "class_name": "NodeUtil",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                926,
                927,
                928,
                929,
                930,
                931,
                932,
                933,
                934,
                935,
                936,
                937,
                938,
                939,
                940,
                941,
                942,
                943,
                944,
                945,
                946,
                947,
                948,
                949,
                950,
                951,
                952,
                953,
                954,
                955,
                956,
                957,
                958,
                959,
                960,
                961,
                962,
                963,
                964,
                965,
                966,
                967,
                968,
                969,
                970,
                971,
                972,
                973,
                974,
                975,
                976
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Closure-61_trace.json"
}