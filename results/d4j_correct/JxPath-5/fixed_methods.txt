private int compareNodePointers(
    NodePointer p1,
    int depth1,
    NodePointer p2,
    int depth2) 
{
    if (p1 == null && p2 == null) {
        // Both nodes are null, they are considered equal.
        return 0;
    }
    if (p1 == null) {
        // If p1 is null and p2 is not, consider p1 < p2.
        return -1;
    }
    if (p2 == null) {
        // If p2 is null and p1 is not, consider p1 > p2.
        return 1;
    }

    if (depth1 < depth2) {
        int r = compareNodePointers(p1, depth1, p2.parent, depth2 - 1);
        return r == 0 ? -1 : r;
    }
    if (depth1 > depth2) {
        int r = compareNodePointers(p1.parent, depth1 - 1, p2, depth2);
        return r == 0 ? 1 : r;
    }

    if (p1.equals(p2)) {
        return 0;
    }

    if (p1.parent == null || p2.parent == null) {
        // If either node has a null parent, they belong to different trees.
        // Define a consistent ordering for nodes that don't have the same tree.
        return p1.parent == null ? -1 : 1;
    }

    int r = compareNodePointers(p1.parent, depth1 - 1, p2.parent, depth2 - 1);
    if (r != 0) {
        return r;
    }

    return p1.parent.compareChildNodePointers(p1, p2);
}
