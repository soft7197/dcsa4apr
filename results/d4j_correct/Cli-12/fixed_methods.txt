### Fixed Method 1
protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {
    List tokens = new ArrayList();
    boolean eatTheRest = false;

    for (int i = 0; i < arguments.length; i++) {
        String arg = arguments[i];

        if ("--".equals(arg)) {
            eatTheRest = true;
            tokens.add("--");
        } else if ("-".equals(arg)) {
            tokens.add("-");
        } else if (arg.startsWith("-")) {
            int equalIndex = arg.indexOf('=');
            String opt;
            String optValue = null;
            if (equalIndex != -1) { // Option with '='
                opt = arg.substring(0, equalIndex);
                optValue = arg.substring(equalIndex + 1);
            } else {
                opt = arg;
            }

            String strippedOpt = Util.stripLeadingHyphens(opt);

            if (options.hasOption(strippedOpt)) {
                tokens.add(opt);
                if (optValue != null) {
                    tokens.add(optValue);
                }
            } else {
                if (opt.length() > 1 && options.hasOption(opt.substring(0, 2))) {
                    tokens.add(opt.substring(0, 2)); // -D
                    if (optValue != null) {
                        tokens.add(opt.substring(2) + "=" + optValue);
                    } else {
                        tokens.add(opt.substring(2));
                    }
                } else {
                    eatTheRest = stopAtNonOption;
                    tokens.add(arg);
                }
            }
        } else {
            tokens.add(arg);
        }

        if (eatTheRest) {
            for (i++; i < arguments.length; i++) {
                tokens.add(arguments[i]);
            }
        }
    }

    return (String[]) tokens.toArray(new String[tokens.size()]);
}
