{
    "bug_id": "Math-106",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Math-106_1756865683",
    "patches": [
        {
            "hypothesis": "The method allows parsing of fractions with a minus sign in the numerator or denominator, which is not allowed according to the method's documentation. The minus sign should only be allowed in the whole number part.",
            "changes": "Added checks to ensure that the numerator and denominator do not have negative values. If they do, the method returns null and sets the error index appropriately.",
            "fixed_method": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null || num.intValue() < 0) {\n        // invalid integer number or negative numerator\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    \n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        // return num as a fraction\n        return new Fraction(num.intValue(), 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null || den.intValue() < 0) {\n        // invalid integer number or negative denominator\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    \n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
            "diff": "--- original\n+++ fixed\n@@ -0,0 +1,73 @@\n+public Fraction parse(String source, ParsePosition pos) {\n+    // try to parse improper fraction\n+    Fraction ret = super.parse(source, pos);\n+    if (ret != null) {\n+        return ret;\n+    }\n+    \n+    int initialIndex = pos.getIndex();\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse whole\n+    Number whole = getWholeFormat().parse(source, pos);\n+    if (whole == null) {\n+        // invalid integer number\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+    \n+    // parse numerator\n+    Number num = getNumeratorFormat().parse(source, pos);\n+    if (num == null || num.intValue() < 0) {\n+        // invalid integer number or negative numerator\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+    \n+    // parse '/'\n+    int startIndex = pos.getIndex();\n+    char c = parseNextCharacter(source, pos);\n+    switch (c) {\n+    case 0 :\n+        // no '/'\n+        // return num as a fraction\n+        return new Fraction(num.intValue(), 1);\n+    case '/' :\n+        // found '/', continue parsing denominator\n+        break;\n+    default :\n+        // invalid '/'\n+        // set index back to initial, error index should be the last\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        pos.setErrorIndex(startIndex);\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse denominator\n+    Number den = getDenominatorFormat().parse(source, pos);\n+    if (den == null || den.intValue() < 0) {\n+        // invalid integer number or negative denominator\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+    \n+    int w = whole.intValue();\n+    int n = num.intValue();\n+    int d = den.intValue();\n+    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n+}",
            "file_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
            "method_name": "parse",
            "class_name": "ProperFractionFormat",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200,
                201,
                202,
                203,
                204,
                205,
                206
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Math-106_trace.json"
}