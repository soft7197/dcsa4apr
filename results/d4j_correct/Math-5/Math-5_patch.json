{
    "bug_id": "Math-5",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Math-5_1756869938",
    "patches": [
        {
            "hypothesis": "The method incorrectly returns NaN when both real and imaginary parts are zero, but the test expects Infinity. The reciprocal of zero should be handled as a special case, returning a complex number with infinite real and imaginary parts.",
            "changes": "Change the return value for the case when both real and imaginary parts are zero from NaN to a Complex number with infinite real and imaginary parts.",
            "fixed_method": "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n\n    if (real == 0.0 && imaginary == 0.0) {\n        return INF;\n    }\n\n    if (isInfinite) {\n        return ZERO;\n    }\n\n    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n        double q = real / imaginary;\n        double scale = 1. / (real * q + imaginary);\n        return createComplex(scale * q, -scale);\n    } else {\n        double q = imaginary / real;\n        double scale = 1. / (imaginary * q + real);\n        return createComplex(scale, -scale * q);\n    }\n}",
            "diff": "--- original\n+++ fixed\n@@ -0,0 +1,23 @@\n+public Complex reciprocal() {\n+    if (isNaN) {\n+        return NaN;\n+    }\n+\n+    if (real == 0.0 && imaginary == 0.0) {\n+        return INF;\n+    }\n+\n+    if (isInfinite) {\n+        return ZERO;\n+    }\n+\n+    if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n+        double q = real / imaginary;\n+        double scale = 1. / (real * q + imaginary);\n+        return createComplex(scale * q, -scale);\n+    } else {\n+        double q = imaginary / real;\n+        double scale = 1. / (imaginary * q + real);\n+        return createComplex(scale, -scale * q);\n+    }\n+}",
            "file_path": "src/main/java/org/apache/commons/math3/complex/Complex.java",
            "method_name": "reciprocal",
            "class_name": "Complex",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                299,
                300,
                301,
                302,
                303,
                304,
                305,
                306,
                307,
                308,
                309,
                310,
                311,
                312,
                313,
                314,
                315,
                316,
                317,
                318,
                319,
                320,
                321
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Math-5_trace.json"
}