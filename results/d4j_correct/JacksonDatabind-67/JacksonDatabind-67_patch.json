{
    "bug_id": "JacksonDatabind-67",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_JacksonDatabind-67_1757919131",
    "patches": [
        {
            "hypothesis": "The error occurs when deserializing a map key into an Enum type. The current logic doesn't attempt to use custom deserializers for Enum types that might have been registered via modifiers. The fix involves ensuring that the custom key deserializer for Enum types is used if provided by a modifier, even when the type is Enum.",
            "fixed_method": "public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n    // the only non-standard thing is this:\n    if (deser == null) {\n        if (type.isEnumType()) {\n            deser = _createEnumKeyDeserializer(ctxt, type);\n        } else {\n            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n        }\n    }\n    // and then post-processing\n    if (deser != null) {\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, deser);\n            }\n        }\n    }\n    return deser;\n}",
            "diff": "--- original\n+++ fixed\n@@ -1,5 +1,3 @@\n-/**********************************************************\n-*/\n public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n         JavaType type)\n     throws JsonMappingException\n@@ -18,9 +16,10 @@\n     // the only non-standard thing is this:\n     if (deser == null) {\n         if (type.isEnumType()) {\n-            return _createEnumKeyDeserializer(ctxt, type);\n+            deser = _createEnumKeyDeserializer(ctxt, type);\n+        } else {\n+            deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n         }\n-        deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n     }\n     // and then post-processing\n     if (deser != null) {\n",
            "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
            "method_name": "createKeyDeserializer",
            "class_name": "BasicDeserializerFactory",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                1385,
                1386,
                1387,
                1388,
                1389,
                1390,
                1391,
                1392,
                1393,
                1394,
                1395,
                1396,
                1397,
                1398,
                1399,
                1400,
                1401,
                1402,
                1403,
                1404,
                1405,
                1406,
                1407,
                1408,
                1409,
                1410,
                1411,
                1412,
                1413,
                1414,
                1415,
                1416
            ],
            "original_code": "/**********************************************************\n*/\npublic KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n        JavaType type)\n    throws JsonMappingException\n{\n    final DeserializationConfig config = ctxt.getConfig();\n    KeyDeserializer deser = null;\n    if (_factoryConfig.hasKeyDeserializers()) {\n        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n        for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n            deser = d.findKeyDeserializer(type, config, beanDesc);\n            if (deser != null) {\n                break;\n            }\n        }\n    }\n    // the only non-standard thing is this:\n    if (deser == null) {\n        if (type.isEnumType()) {\n            return _createEnumKeyDeserializer(ctxt, type);\n        }\n        deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n    }\n    // and then post-processing\n    if (deser != null) {\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deser = mod.modifyKeyDeserializer(config, type, deser);\n            }\n        }\n    }\n    return deser;\n}"
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/JacksonDatabind-67_trace.json"
}