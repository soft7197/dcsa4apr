{
    "bug_id": "Lang-24",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Lang-24_1757178606",
    "patches": [
        {
            "hypothesis": "The method incorrectly identifies '1.1L' as a valid number. A number with a decimal point should not have a long type qualifier (L). The check for 'L' as a valid suffix should exclude numbers with decimal points.",
            "fixed_method": "/**\n* <p>Checks whether the String a valid Java number.</p>\n*\n* <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n* qualifier, scientific notation and numbers marked with a type\n* qualifier (e.g. 123L).</p>\n*\n* <p><code>Null</code> and empty String will return\n* <code>false</code>.</p>\n*\n* @param str  the <code>String</code> to check\n* @return <code>true</code> if the string is a correctly formatted number\n*/\npublic static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n    char[] chars = str.toCharArray();\n    int sz = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    // deal with any possible sign up front\n    int start = (chars[0] == '-') ? 1 : 0;\n    if (sz > start + 1) {\n        if (chars[start] == '0' && chars[start + 1] == 'x') {\n            int i = start + 2;\n            if (i == sz) {\n                return false; // str == \"0x\"\n            }\n            // checking hex (it can't be anything else)\n            for (; i < chars.length; i++) {\n                if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F')) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    sz--; // don't want to loop to the last char, check it afterwards\n          // for type qualifiers\n    int i = start;\n    // loop to the next to last char or to the last char if we need another digit to\n    // make a valid number (e.g. chars[0..5] = \"1234E\")\n    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            foundDigit = true;\n            allowSigns = false;\n        } else if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                // two decimal points or decimal in exponent   \n                return false;\n            }\n            hasDecPoint = true;\n        } else if (chars[i] == 'e' || chars[i] == 'E') {\n            // we've already taken care of hex.\n            if (hasExp) {\n                // two E's\n                return false;\n            }\n            if (!foundDigit) {\n                return false;\n            }\n            hasExp = true;\n            allowSigns = true;\n        } else if (chars[i] == '+' || chars[i] == '-') {\n            if (!allowSigns) {\n                return false;\n            }\n            allowSigns = false;\n            foundDigit = false; // we need a digit after the E\n        } else {\n            return false;\n        }\n        i++;\n    }\n    if (i < chars.length) {\n        if (chars[i] >= '0' && chars[i] <= '9') {\n            // no type qualifier, OK\n            return true;\n        }\n        if (chars[i] == 'e' || chars[i] == 'E') {\n            // can't have an E at the last byte\n            return false;\n        }\n        if (chars[i] == '.') {\n            if (hasDecPoint || hasExp) {\n                // two decimal points or decimal in exponent\n                return false;\n            }\n            // single trailing decimal point after non-exponent is ok\n            return foundDigit;\n        }\n        if (!allowSigns\n            && (chars[i] == 'd'\n                || chars[i] == 'D'\n                || chars[i] == 'f'\n                || chars[i] == 'F')) {\n            return foundDigit;\n        }\n        if (chars[i] == 'l'\n            || chars[i] == 'L') {\n            // not allowing L with an exponent or decimal point\n            return foundDigit && !hasExp && !hasDecPoint;\n        }\n        // last character is illegal\n        return false;\n    }\n    // allowSigns is true iff the val ends in 'E'\n    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n    return !allowSigns && foundDigit;\n}",
            "diff": "--- original\n+++ fixed\n@@ -40,7 +40,7 @@\n             return true;\n         }\n     }\n-    sz--; // don't want to loop to the last char, check it afterwords\n+    sz--; // don't want to loop to the last char, check it afterwards\n           // for type qualifiers\n     int i = start;\n     // loop to the next to last char or to the last char if we need another digit to\n@@ -49,10 +49,9 @@\n         if (chars[i] >= '0' && chars[i] <= '9') {\n             foundDigit = true;\n             allowSigns = false;\n-\n         } else if (chars[i] == '.') {\n             if (hasDecPoint || hasExp) {\n-                // two decimal points or dec in exponent   \n+                // two decimal points or decimal in exponent   \n                 return false;\n             }\n             hasDecPoint = true;\n@@ -89,7 +88,7 @@\n         }\n         if (chars[i] == '.') {\n             if (hasDecPoint || hasExp) {\n-                // two decimal points or dec in exponent\n+                // two decimal points or decimal in exponent\n                 return false;\n             }\n             // single trailing decimal point after non-exponent is ok\n@@ -105,7 +104,7 @@\n         if (chars[i] == 'l'\n             || chars[i] == 'L') {\n             // not allowing L with an exponent or decimal point\n-            return foundDigit && !hasExp;\n+            return foundDigit && !hasExp && !hasDecPoint;\n         }\n         // last character is illegal\n         return false;\n",
            "file_path": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "method_name": "isNumber",
            "class_name": "NumberUtils",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                1319,
                1320,
                1321,
                1322,
                1323,
                1324,
                1325,
                1326,
                1327,
                1328,
                1329,
                1330,
                1331,
                1332,
                1333,
                1334,
                1335,
                1336,
                1337,
                1338,
                1339,
                1340,
                1341,
                1342,
                1343,
                1344,
                1345,
                1346,
                1347,
                1348,
                1349,
                1350,
                1351,
                1352,
                1353,
                1354,
                1355,
                1356,
                1357,
                1358,
                1359,
                1360,
                1361,
                1362,
                1363,
                1364,
                1365,
                1366,
                1367,
                1368,
                1369,
                1370,
                1371,
                1372,
                1373,
                1374,
                1375,
                1376,
                1377,
                1378,
                1379,
                1380,
                1381,
                1382,
                1383,
                1384,
                1385,
                1386,
                1387,
                1388,
                1389,
                1390,
                1391,
                1392,
                1393,
                1394,
                1395,
                1396,
                1397,
                1398,
                1399,
                1400,
                1401,
                1402,
                1403,
                1404,
                1405,
                1406,
                1407,
                1408,
                1409,
                1410,
                1411,
                1412,
                1413,
                1414,
                1415,
                1416,
                1417,
                1418,
                1419,
                1420,
                1421
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Lang-24_trace.json"
}