{
    "bug_id": "JacksonDatabind-101",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_JacksonDatabind-101_1757171728",
    "patches": [
        {
            "hypothesis": "The error occurs because the properties that are supposed to be unwrapped and serialized into a separate object 'w' are not processed correctly after the last creator property is set. This causes properties like 'b' to not be assigned to the inner bean 'w'. To fix this, we should ensure that unwrapped fields are appropriately processed during deserialization.",
            "fixed_method": "// Need to copy to a separate buffer first\nprotected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p, DeserializationContext ctxt)\n    throws IOException\n{\n    // 01-Dec-2016, tatu: Note: This IS legal to call, but only when unwrapped\n    //    value itself is NOT passed via `CreatorProperty` (which isn't supported).\n    //    Ok however to pass via setter or field.\n    \n    final PropertyBasedCreator creator = _propertyBasedCreator;\n    PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n\n    TokenBuffer tokens = new TokenBuffer(p, ctxt);\n    tokens.writeStartObject();\n\n    JsonToken t = p.getCurrentToken();\n    for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n        String propName = p.getCurrentName();\n        p.nextToken(); // to point to value\n        // creator property?\n        SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            // Last creator property to set?\n            if (buffer.assignParameter(creatorProp,\n                    _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n                Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n                // [databind#631]: Assign current value, to be accessible by custom serializers\n                p.setCurrentValue(bean);\n                // if so, need to copy all remaining tokens into buffer\n                while (t == JsonToken.FIELD_NAME) {\n                    // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that\n                    tokens.copyCurrentStructure(p);\n                    t = p.nextToken();\n                }\n                // 28-Aug-2018, tatu: Let's add sanity check here, easier to catch off-by-some\n                //    problems if we maintain invariants\n                tokens.writeEndObject();\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    // !!! 08-Jul-2011, tatu: Could probably support; but for now\n                    //   it's too complicated, so bail out\n                    ctxt.reportInputMismatch(creatorProp,\n                            \"Cannot create polymorphic instances with unwrapped values\");\n                    return null;\n                }\n                return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n            }\n            continue;\n        }\n        // Object Id property?\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        // regular property? needs buffering\n        SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n            continue;\n        }\n        // Things marked as ignorable should not be passed to any setter\n        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        // how about any setter? We'll get copies but...\n        if (_anySetter == null) {\n            // but... others should be passed to unwrapped property deserializers\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n        } else {\n            // Need to copy to a separate buffer first\n            TokenBuffer b2 = TokenBuffer.asCopyOfValue(p);\n            tokens.writeFieldName(propName);\n            tokens.append(b2);\n            try {\n                buffer.bufferAnyProperty(_anySetter, propName,\n                        _anySetter.deserialize(b2.asParserOnFirstToken(), ctxt));\n            } catch (Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            continue;\n        }\n    }\n\n    // We hit END_OBJECT, so:\n    Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        return null; // never gets here\n    }\n    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n}",
            "diff": "--- original\n+++ fixed\n@@ -34,7 +34,6 @@\n                 // if so, need to copy all remaining tokens into buffer\n                 while (t == JsonToken.FIELD_NAME) {\n                     // NOTE: do NOT skip name as it needs to be copied; `copyCurrentStructure` does that\n-                    p.nextToken();\n                     tokens.copyCurrentStructure(p);\n                     t = p.nextToken();\n                 }\n@@ -67,9 +66,6 @@\n             handleIgnoredProperty(p, ctxt, handledType(), propName);\n             continue;\n         }\n-        // 29-Nov-2016, tatu: probably should try to avoid sending content\n-        //    both to any setter AND buffer... but, for now, the only thing\n-        //    we can do.\n         // how about any setter? We'll get copies but...\n         if (_anySetter == null) {\n             // but... others should be passed to unwrapped property deserializers\n",
            "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "method_name": "deserializeUsingPropertyBasedWithUnwrapped",
            "class_name": "BeanDeserializer",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                736,
                737,
                738,
                739,
                740,
                741,
                742,
                743,
                744,
                745,
                746,
                747,
                748,
                749,
                750,
                751,
                752,
                753,
                754,
                755,
                756,
                757,
                758,
                759,
                760,
                761,
                762,
                763,
                764,
                765,
                766,
                767,
                768,
                769,
                770,
                771,
                772,
                773,
                774,
                775,
                776,
                777,
                778,
                779,
                780,
                781,
                782,
                783,
                784,
                785,
                786,
                787,
                788,
                789,
                790,
                791,
                792,
                793,
                794,
                795,
                796,
                797,
                798,
                799,
                800,
                801,
                802,
                803,
                804,
                805,
                806,
                807,
                808,
                809,
                810,
                811,
                812,
                813,
                814,
                815,
                816,
                817,
                818,
                819,
                820,
                821,
                822,
                823,
                824,
                825,
                826,
                827,
                828,
                829,
                830,
                831,
                832,
                833,
                834,
                835,
                836
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/JacksonDatabind-101_trace.json"
}