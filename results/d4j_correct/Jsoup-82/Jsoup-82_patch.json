{
    "bug_id": "Jsoup-82",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Jsoup-82_1757177697",
    "patches": [
        {
            "hypothesis": "The issue arises because the 'parseInputStream' method doesn't update the document's charset to UTF-8 when the detected character set cannot encode. The desired behavior is to fallback to UTF-8 if the charset is non-encodable. This involves checking if the charset can encode and switching to UTF-8 if it cannot.",
            "fixed_method": "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {\n    if (input == null) // empty body\n        return new Document(baseUri);\n    input = ConstrainableInputStream.wrap(input, bufferSize, 0);\n\n    Document doc = null;\n    boolean fullyRead = false;\n\n    // read the start of the stream and look for a BOM or meta charset\n    input.mark(bufferSize);\n    ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); // -1 because we read one more to see if completed. First read is < buffer size, so can't be invalid.\n    fullyRead = input.read() == -1;\n    input.reset();\n\n    // look for BOM - overrides any other header or input\n    BomCharset bomCharset = detectCharsetFromBom(firstBytes);\n    if (bomCharset != null)\n        charsetName = bomCharset.charset;\n\n    if (charsetName == null) { // determine from meta. safe first parse as UTF-8\n        String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();\n        doc = parser.parseInput(docData, baseUri);\n\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");\n        String foundCharset = null; // if not found, will keep utf-8 as best attempt\n        for (Element meta : metaElements) {\n            if (meta.hasAttr(\"http-equiv\"))\n                foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n            if (foundCharset == null && meta.hasAttr(\"charset\"))\n                foundCharset = meta.attr(\"charset\");\n            if (foundCharset != null)\n                break;\n        }\n\n        // look for <?xml encoding='ISO-8859-1'?>\n        if (foundCharset == null && doc.childNodeSize() > 0) {\n            Node first = doc.childNode(0);\n            XmlDeclaration decl = null;\n            if (first instanceof XmlDeclaration)\n                decl = (XmlDeclaration) first;\n            else if (first instanceof Comment) {\n                Comment comment = (Comment) first;\n                if (comment.isXmlDeclaration())\n                    decl = comment.asXmlDeclaration();\n            }\n            if (decl != null) {\n                if (decl.name().equalsIgnoreCase(\"xml\"))\n                    foundCharset = decl.attr(\"encoding\");\n            }\n        }\n        foundCharset = validateCharset(foundCharset);\n        if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)\n            foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n            charsetName = foundCharset;\n            doc = null;\n        } else if (!fullyRead) {\n            doc = null;\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n    }\n    if (doc == null) {\n        if (charsetName == null)\n            charsetName = defaultCharset;\n        BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);\n        if (bomCharset != null && bomCharset.offset) // creating the buffered reader ignores the input pos, so must skip here\n            reader.skip(1);\n        try {\n            doc = parser.parseInput(reader, baseUri);\n        } catch (UncheckedIOException e) {\n            // io exception when parsing (not seen before because reading the stream as we go)\n            throw e.ioException();\n        }\n        Charset charset = Charset.forName(charsetName);\n        if (!charset.canEncode()) {\n            charset = Charset.forName(\"UTF-8\");\n        }\n        doc.outputSettings().charset(charset);\n        // some charsets can read but not encode; switch to an encodable charset and update the meta el\n        Elements metaElements = doc.select(\"meta[charset]\");\n        for (Element meta : metaElements) {\n            meta.attr(\"charset\", charset.name());\n        }\n    }\n    input.close();\n    return doc;\n}",
            "diff": "--- original\n+++ fixed\n@@ -1,10 +1,4 @@\n-/**\n-* Writes the input stream to the output stream. Doesn't close them.\n-* @param in input stream to read from\n-* @param out output stream to write to\n-* @throws IOException on IO error\n-*/\n-static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException  {\n+static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {\n     if (input == null) // empty body\n         return new Document(baseUri);\n     input = ConstrainableInputStream.wrap(input, bufferSize, 0);\n@@ -79,8 +73,15 @@\n             throw e.ioException();\n         }\n         Charset charset = Charset.forName(charsetName);\n+        if (!charset.canEncode()) {\n+            charset = Charset.forName(\"UTF-8\");\n+        }\n         doc.outputSettings().charset(charset);\n-            // some charsets can read but not encode; switch to an encodable charset and update the meta el\n+        // some charsets can read but not encode; switch to an encodable charset and update the meta el\n+        Elements metaElements = doc.select(\"meta[charset]\");\n+        for (Element meta : metaElements) {\n+            meta.attr(\"charset\", charset.name());\n+        }\n     }\n     input.close();\n     return doc;\n",
            "file_path": "src/main/java/org/jsoup/helper/DataUtil.java",
            "method_name": "parseInputStream",
            "class_name": "DataUtil",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173,
                174,
                175
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Jsoup-82_trace.json"
}