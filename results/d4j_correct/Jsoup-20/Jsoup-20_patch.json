{
    "bug_id": "Jsoup-20",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Jsoup-20_1756721163",
    "patches": [
        {
            "hypothesis": "The method fails to handle a BOM (Byte Order Mark) correctly when decoding the byte data, specifically for encodings that use a BOM like UTF-8. This can lead to unexpected characters at the start of the document data, affecting the parsing result.",
            "changes": "Added code to strip the BOM if it exists at the start of the decoded data, ensuring the parser receives clean input.",
            "fixed_method": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n    String docData;\n    Document doc = null;\n    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n        doc = parser.parseInput(docData, baseUri);\n        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n        if (meta != null) { // if not found, will keep utf-8 as best attempt\n            String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        }\n    } else { // specified by content type header (or by user on file load)\n        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n        docData = Charset.forName(charsetName).decode(byteData).toString();\n    }\n    if (doc == null) {\n        // Strip BOM if present\n        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n            docData = docData.substring(1);\n        }\n\n        doc = parser.parseInput(docData, baseUri);\n        doc.outputSettings().charset(charsetName);\n    }\n    return doc;\n}",
            "diff": "--- original\n+++ fixed\n@@ -0,0 +1,32 @@\n+static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n+    String docData;\n+    Document doc = null;\n+    if (charsetName == null) { // determine from meta. safe parse as UTF-8\n+        // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n+        docData = Charset.forName(defaultCharset).decode(byteData).toString();\n+        doc = parser.parseInput(docData, baseUri);\n+        Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n+        if (meta != null) { // if not found, will keep utf-8 as best attempt\n+            String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n+            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                charsetName = foundCharset;\n+                byteData.rewind();\n+                docData = Charset.forName(foundCharset).decode(byteData).toString();\n+                doc = null;\n+            }\n+        }\n+    } else { // specified by content type header (or by user on file load)\n+        Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n+        docData = Charset.forName(charsetName).decode(byteData).toString();\n+    }\n+    if (doc == null) {\n+        // Strip BOM if present\n+        if (docData.length() > 0 && docData.charAt(0) == '\\uFEFF') {\n+            docData = docData.substring(1);\n+        }\n+\n+        doc = parser.parseInput(docData, baseUri);\n+        doc.outputSettings().charset(charsetName);\n+    }\n+    return doc;\n+}",
            "file_path": "src/main/java/org/jsoup/helper/DataUtil.java",
            "method_name": "parseByteData",
            "class_name": "DataUtil",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Jsoup-20_trace.json"
}