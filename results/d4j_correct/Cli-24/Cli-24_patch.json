{
    "bug_id": "Cli-24",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Cli-24_1757153460",
    "patches": [
        {
            "hypothesis": "The method throws an IllegalStateException when 'nextLineTabStop' is greater than or equal to 'width'. This condition doesn't allow for any indent to be added if there's an infinite loop risk. The fix is to ensure that 'nextLineTabStop' is less than 'width' and adjust line wrapping logic to a minimum of 1 character in cases where indentation nearly equals line width.",
            "fixed_method": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                         int nextLineTabStop, String text)\n{\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1)\n    {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    if (nextLineTabStop >= width)\n    {\n        // Adjust the nextLineTabStop to avoid an infinite loop,\n        // Allow a minimum of 1 character width for new line text when nextLineTabStop nearly equals width\n        nextLineTabStop = Math.max(0, width - 1);\n    }\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true)\n    {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1)\n        {\n            sb.append(text);\n\n            return sb;\n        }\n        \n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) \n        {\n            pos = width;\n        }\n        \n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
            "diff": "--- original\n+++ fixed\n@@ -1,14 +1,3 @@\n-/**\n-* Render the specified text and return the rendered Options\n-* in a StringBuffer.\n-*\n-* @param sb The StringBuffer to place the rendered text into.\n-* @param width The number of characters to display per line\n-* @param nextLineTabStop The position on the next line for the first tab.\n-* @param text The text to be rendered.\n-*\n-* @return the StringBuffer with the rendered Options contents.\n-*/\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, \n                                          int nextLineTabStop, String text)\n {\n@@ -24,9 +13,9 @@\n \n     if (nextLineTabStop >= width)\n     {\n-        // stops infinite loop happening\n-        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \n-                                        \"- no room for the description\");\n+        // Adjust the nextLineTabStop to avoid an infinite loop,\n+        // Allow a minimum of 1 character width for new line text when nextLineTabStop nearly equals width\n+        nextLineTabStop = Math.max(0, width - 1);\n     }\n \n     // all following lines must be padded with nextLineTabStop space \n@@ -49,7 +38,7 @@\n         {\n             pos = width;\n         }\n-\n+        \n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }",
            "file_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
            "method_name": "renderWrappedText",
            "class_name": "HelpFormatter",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                809,
                810,
                811,
                812,
                813,
                814,
                815,
                816,
                817,
                818,
                819,
                820,
                821,
                822,
                823,
                824,
                825,
                826,
                827,
                828,
                829,
                830,
                831,
                832,
                833,
                834,
                835,
                836,
                837,
                838,
                839,
                840,
                841,
                842,
                843,
                844,
                845,
                846,
                847,
                848,
                849,
                850,
                851,
                852
            ]
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/Cli-24_trace.json"
}