{
    "bug_id": "JacksonDatabind-94",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_JacksonDatabind-94_1757919914",
    "patches": [
        {
            "hypothesis": "The method is supposed to prevent deserialization of certain illegal types, including specific third-party classes like those from the c3p0 library. The test fails because the method does not currently handle c3p0 types. These classes need to be explicitly checked and blocked in the method.",
            "fixed_method": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    // There are certain nasty classes that could cause problems, mostly\n    // via default typing -- catch them here.\n    final Class<?> raw = type.getRawClass();\n    String full = raw.getName();\n\n    main_check:\n    do {\n        if (_cfgIllegalClassNames.contains(full)) {\n            break;\n        }\n\n        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n        //    for some Spring framework types\n        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n        if (raw.isInterface()) {\n            ;\n        } else if (full.startsWith(PREFIX_SPRING)) {\n            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n                String name = cls.getSimpleName();\n                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                if (\"AbstractPointcutAdvisor\".equals(name)\n                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                        || \"AbstractApplicationContext\".equals(name)) {\n                    break main_check;\n                }\n            }\n        } else if (full.startsWith(\"com.mchange.v2.c3p0.\")) {\n            // Block c3p0 types as per [databind#1931]\n            break;\n        }\n\n        return;\n    } while (false);\n\n    throw JsonMappingException.from(ctxt,\n            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n}",
            "diff": "--- original\n+++ fixed\n@@ -1,44 +1,38 @@\n-/**\n-* Set of class names of types that are never to be deserialized.\n-*/\n-public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n-    {\n-        // There are certain nasty classes that could cause problems, mostly\n-        // via default typing -- catch them here.\n-        final Class<?> raw = type.getRawClass();\n-        String full = raw.getName();\n+public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+    // There are certain nasty classes that could cause problems, mostly\n+    // via default typing -- catch them here.\n+    final Class<?> raw = type.getRawClass();\n+    String full = raw.getName();\n \n-        main_check:\n-        do {\n-            if (_cfgIllegalClassNames.contains(full)) {\n-                break;\n-            }\n+    main_check:\n+    do {\n+        if (_cfgIllegalClassNames.contains(full)) {\n+            break;\n+        }\n \n-            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n-            //    for some Spring framework types\n-            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n-            if (raw.isInterface()) {\n-                ;\n-            } else if (full.startsWith(PREFIX_SPRING)) {\n-                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){\n-                    String name = cls.getSimpleName();\n-                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n-                    if (\"AbstractPointcutAdvisor\".equals(name)\n-                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                            || \"AbstractApplicationContext\".equals(name)) {\n-                        break main_check;\n-                    }\n-                // [databind#1737]; more 3rd party\n-                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n-                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n-                // [databind#1931]; more 3rd party\n-                // com.mchange.v2.c3p0.ComboPooledDataSource\n-                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource \n+        // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n+        //    for some Spring framework types\n+        // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n+        if (raw.isInterface()) {\n+            ;\n+        } else if (full.startsWith(PREFIX_SPRING)) {\n+            for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()) {\n+                String name = cls.getSimpleName();\n+                // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n+                if (\"AbstractPointcutAdvisor\".equals(name)\n+                        // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n+                        || \"AbstractApplicationContext\".equals(name)) {\n+                    break main_check;\n                 }\n             }\n-            return;\n-        } while (false);\n+        } else if (full.startsWith(\"com.mchange.v2.c3p0.\")) {\n+            // Block c3p0 types as per [databind#1931]\n+            break;\n+        }\n \n-        throw JsonMappingException.from(ctxt,\n-                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n-    }+        return;\n+    } while (false);\n+\n+    throw JsonMappingException.from(ctxt,\n+            String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n+}",
            "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
            "method_name": "validateSubType",
            "class_name": "SubTypeValidator",
            "iteration": 1,
            "is_multi_method": false,
            "line_numbers": [
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111
            ],
            "original_code": "/**\n* Set of class names of types that are never to be deserialized.\n*/\npublic void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException\n    {\n        // There are certain nasty classes that could cause problems, mostly\n        // via default typing -- catch them here.\n        final Class<?> raw = type.getRawClass();\n        String full = raw.getName();\n\n        main_check:\n        do {\n            if (_cfgIllegalClassNames.contains(full)) {\n                break;\n            }\n\n            // 18-Dec-2017, tatu: As per [databind#1855], need bit more sophisticated handling\n            //    for some Spring framework types\n            // 05-Jan-2017, tatu: ... also, only applies to classes, not interfaces\n            if (raw.isInterface()) {\n                ;\n            } else if (full.startsWith(PREFIX_SPRING)) {\n                for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){\n                    String name = cls.getSimpleName();\n                    // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                    if (\"AbstractPointcutAdvisor\".equals(name)\n                            // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n                            || \"AbstractApplicationContext\".equals(name)) {\n                        break main_check;\n                    }\n                // [databind#1737]; more 3rd party\n                // s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\");\n                // s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");\n                // [databind#1931]; more 3rd party\n                // com.mchange.v2.c3p0.ComboPooledDataSource\n                // com.mchange.v2.c3p0.debug.AfterCloseLoggingComboPooledDataSource \n                }\n            }\n            return;\n        } while (false);\n\n        throw JsonMappingException.from(ctxt,\n                String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));\n    }"
        }
    ],
    "iterations": 1,
    "monitor_file": "traces/JacksonDatabind-94_trace.json"
}