### Fixed Method 1
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;

    // Check for BOMs and determine potential charset
    final byte[] bom = new byte[4];
    byteData.mark();
    if (byteData.remaining() >= 4) {
        byteData.get(bom);
    }
    byteData.rewind();

    // Determine encoding from BOM
    if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {
        charsetName = "UTF-8";
        byteData.position(3); // skip BOM
    } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF) {
        charsetName = "UTF-16BE";
        byteData.position(2); // skip BOM
    } else if (bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {
        if (bom[2] == 0x00 && bom[3] == 0x00) {
            charsetName = "UTF-32LE";
            byteData.position(4); // skip BOM
        } else {
            charsetName = "UTF-16LE";
            byteData.position(2); // skip BOM
        }
    } else if (bom[0] == (byte) 0x00 && bom[1] == (byte) 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF) {
        charsetName = "UTF-32BE";
        byteData.position(4); // skip BOM
    } else {
        byteData.rewind(); // No BOM found, reset position
    }

    if (charsetName == null) { // determine from meta. safe parse as UTF-8
        // Decode using default charset
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();
        if (meta != null) { // if not found, will keep utf-8 as best attempt
            String foundCharset = null;
            if (meta.hasAttr("http-equiv")) {
                foundCharset = getCharsetFromContentType(meta.attr("content"));
            }
            if (foundCharset == null && meta.hasAttr("charset")) {
                try {
                    if (Charset.isSupported(meta.attr("charset"))) {
                        foundCharset = meta.attr("charset");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }

            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode
                foundCharset = foundCharset.trim().replaceAll("[\"']", "");
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else { // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }

    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }

    return doc;
}
