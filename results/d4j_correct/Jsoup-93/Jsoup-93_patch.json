{
    "bug_id": "Jsoup-93",
    "success": true,
    "error": null,
    "patch": null,
    "project_path": "/tmp/d4j_Jsoup-93_1756860937",
    "patches": [
        {
            "hypothesis": "The method incorrectly includes elements with type 'button' in the form data, which should not be submitted as part of form data according to HTML form submission rules.",
            "changes": "- if (name.length() == 0) continue;\n+ if (name.length() == 0 || \"button\".equalsIgnoreCase(type)) continue;",
            "fixed_method": "public List<Connection.KeyVal> formData() {\n    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n\n    // iterate the form control elements and accumulate their values\n    for (Element el: elements) {\n        if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n        if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n        String name = el.attr(\"name\");\n        if (name.length() == 0 || \"button\".equalsIgnoreCase(el.attr(\"type\"))) continue;\n        String type = el.attr(\"type\");\n\n        if (\"select\".equals(el.normalName())) {\n            Elements options = el.select(\"option[selected]\");\n            boolean set = false;\n            for (Element option: options) {\n                data.add(HttpConnection.KeyVal.create(name, option.val()));\n                set = true;\n            }\n            if (!set) {\n                Element option = el.select(\"option\").first();\n                if (option != null)\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n            }\n        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n            // only add checkbox or radio if they have the checked attribute\n            if (el.hasAttr(\"checked\")) {\n                final String val = el.val().length() >  0 ? el.val() : \"on\";\n                data.add(HttpConnection.KeyVal.create(name, val));\n            }\n        } else {\n            data.add(HttpConnection.KeyVal.create(name, el.val()));\n        }\n    }\n    return data;\n}",
            "diff": "--- original\n+++ fixed\n@@ -0,0 +1,35 @@\n+public List<Connection.KeyVal> formData() {\n+    ArrayList<Connection.KeyVal> data = new ArrayList<>();\n+\n+    // iterate the form control elements and accumulate their values\n+    for (Element el: elements) {\n+        if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n+        if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n+        String name = el.attr(\"name\");\n+        if (name.length() == 0 || \"button\".equalsIgnoreCase(el.attr(\"type\"))) continue;\n+        String type = el.attr(\"type\");\n+\n+        if (\"select\".equals(el.normalName())) {\n+            Elements options = el.select(\"option[selected]\");\n+            boolean set = false;\n+            for (Element option: options) {\n+                data.add(HttpConnection.KeyVal.create(name, option.val()));\n+                set = true;\n+            }\n+            if (!set) {\n+                Element option = el.select(\"option\").first();\n+                if (option != null)\n+                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n+            }\n+        } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n+            // only add checkbox or radio if they have the checked attribute\n+            if (el.hasAttr(\"checked\")) {\n+                final String val = el.val().length() >  0 ? el.val() : \"on\";\n+                data.add(HttpConnection.KeyVal.create(name, val));\n+            }\n+        } else {\n+            data.add(HttpConnection.KeyVal.create(name, el.val()));\n+        }\n+    }\n+    return data;\n+}",
            "file_path": "src/main/java/org/jsoup/nodes/FormElement.java",
            "method_name": "formData",
            "class_name": "FormElement",
            "iteration": 2,
            "is_multi_method": false,
            "line_numbers": [
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113
            ]
        }
    ],
    "iterations": 2,
    "monitor_file": "traces/Jsoup-93_trace.json"
}