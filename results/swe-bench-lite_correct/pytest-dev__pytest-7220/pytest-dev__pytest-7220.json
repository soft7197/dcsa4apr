{
    "bug_id": "pytest-dev__pytest-7220",
    "problem_statement": "Wrong path to test file when directory changed in fixture\nFiles are shown as relative to new directory when working directory is changed in a fixture. This makes it impossible to jump to the error as the editor is unaware of the directory change. The displayed directory should stay relative to the original directory.\r\n\r\ntest_path_error.py:\r\n```python\r\nimport os\r\nimport errno\r\nimport shutil\r\n\r\nimport pytest\r\n\r\n\r\n@pytest.fixture\r\ndef private_dir():  # or (monkeypatch)\r\n    out_dir = 'ddd'\r\n\r\n    try:\r\n        shutil.rmtree(out_dir)\r\n    except OSError as ex:\r\n        if ex.errno != errno.ENOENT:\r\n            raise\r\n    os.mkdir(out_dir)\r\n\r\n    old_dir = os.getcwd()\r\n    os.chdir(out_dir)\r\n    yield out_dir\r\n    os.chdir(old_dir)\r\n\r\n    # Same issue if using:\r\n    # monkeypatch.chdir(out_dir)\r\n\r\n\r\ndef test_show_wrong_path(private_dir):\r\n    assert False\r\n```\r\n\r\n```diff\r\n+ Expected: test_path_error.py:29: AssertionError\r\n- Displayed: ../test_path_error.py:29: AssertionError\r\n```\r\n\r\nThe full output is:\r\n```\r\n-*- mode: compilation; default-directory: \"~/src/pytest_path_error/\" -*-\r\nCompilation started at Fri Jan 10 00:05:52\r\n\r\nnox\r\nnox > Running session test\r\nnox > Creating virtual environment (virtualenv) using python3.7 in .nox/test\r\nnox > pip install pytest>=5.3\r\nnox > pip freeze\r\nattrs==19.3.0\r\nimportlib-metadata==1.3.0\r\nmore-itertools==8.0.2\r\npackaging==20.0\r\npluggy==0.13.1\r\npy==1.8.1\r\npyparsing==2.4.6\r\npytest==5.3.2\r\nsix==1.13.0\r\nwcwidth==0.1.8\r\nzipp==0.6.0\r\nnox > pytest \r\n================================= test session starts =================================\r\nplatform linux -- Python 3.7.5, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /home/lhn/src/pytest_path_error\r\ncollected 1 item                                                                      \r\n\r\ntest_path_error.py F                                                            [100%]\r\n\r\n====================================== FAILURES =======================================\r\n________________________________ test_show_wrong_path _________________________________\r\n\r\nprivate_dir = 'ddd'\r\n\r\n    def test_show_wrong_path(private_dir):\r\n>       assert False\r\nE       assert False\r\n\r\n../test_path_error.py:29: AssertionError\r\n================================== 1 failed in 0.03s ==================================\r\nnox > Command pytest  failed with exit code 1\r\nnox > Session test failed.\r\n\r\nCompilation exited abnormally with code 1 at Fri Jan 10 00:06:01\r\n```\r\n\r\nnoxfile.py:\r\n```python\r\nimport nox\r\n\r\n@nox.session(python='3.7')\r\ndef test(session):\r\n    session.install('pytest>=5.3')\r\n    session.run('pip', 'freeze')\r\n    session.run('pytest')\r\n```\n",
    "dev_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -29,6 +29,7 @@\n from _pytest.mark.structures import MarkDecorator\n from _pytest.mark.structures import NodeKeywords\n from _pytest.outcomes import fail\n+from _pytest.pathlib import Path\n from _pytest.store import Store\n \n if TYPE_CHECKING:\n@@ -361,9 +362,14 @@ def _repr_failure_py(\n         else:\n             truncate_locals = True\n \n+        # excinfo.getrepr() formats paths relative to the CWD if `abspath` is False.\n+        # It is possible for a fixture/test to change the CWD while this code runs, which\n+        # would then result in the user seeing confusing paths in the failure message.\n+        # To fix this, if the CWD changed, always display the full absolute path.\n+        # It will be better to just always display paths relative to invocation_dir, but\n+        # this requires a lot of plumbing (#6428).\n         try:\n-            os.getcwd()\n-            abspath = False\n+            abspath = Path(os.getcwd()) != Path(self.config.invocation_dir)\n         except OSError:\n             abspath = True\n \n",
    "our_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -331,50 +331,47 @@\n         pass\n \n     def _repr_failure_py(\n-        self, excinfo: ExceptionInfo[BaseException], style=None,\n-    ) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n-        if isinstance(excinfo.value, ConftestImportFailure):\n-            excinfo = ExceptionInfo(excinfo.value.excinfo)\n-        if isinstance(excinfo.value, fail.Exception):\n-            if not excinfo.value.pytrace:\n-                style = \"value\"\n-        if isinstance(excinfo.value, FixtureLookupError):\n-            return excinfo.value.formatrepr()\n-        if self.config.getoption(\"fulltrace\", False):\n-            style = \"long\"\n-        else:\n-            tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n-            self._prunetraceback(excinfo)\n-            if len(excinfo.traceback) == 0:\n-                excinfo.traceback = tb\n-            if style == \"auto\":\n+            self, excinfo: ExceptionInfo[BaseException], style=None,\n+        ) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n+            if isinstance(excinfo.value, ConftestImportFailure):\n+                excinfo = ExceptionInfo(excinfo.value.excinfo)\n+            if isinstance(excinfo.value, fail.Exception):\n+                if not excinfo.value.pytrace:\n+                    style = \"value\"\n+            if isinstance(excinfo.value, FixtureLookupError):\n+                return excinfo.value.formatrepr()\n+            if self.config.getoption(\"fulltrace\", False):\n                 style = \"long\"\n-        # XXX should excinfo.getrepr record all data and toterminal() process it?\n-        if style is None:\n-            if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n-                style = \"short\"\n             else:\n-                style = \"long\"\n-\n-        if self.config.getoption(\"verbose\", 0) > 1:\n-            truncate_locals = False\n-        else:\n-            truncate_locals = True\n-\n-        try:\n-            os.getcwd()\n-            abspath = False\n-        except OSError:\n+                tb = _pytest._code.Traceback([excinfo.traceback[-1]])\n+                self._prunetraceback(excinfo)\n+                if len(excinfo.traceback) == 0:\n+                    excinfo.traceback = tb\n+                if style == \"auto\":\n+                    style = \"long\"\n+            # XXX should excinfo.getrepr record all data and toterminal() process it?\n+            if style is None:\n+                if self.config.getoption(\"tbstyle\", \"auto\") == \"short\":\n+                    style = \"short\"\n+                else:\n+                    style = \"long\"\n+\n+            if self.config.getoption(\"verbose\", 0) > 1:\n+                truncate_locals = False\n+            else:\n+                truncate_locals = True\n+\n+            # Use the absolute path based on the original working directory\n             abspath = True\n \n-        return excinfo.getrepr(\n-            funcargs=True,\n-            abspath=abspath,\n-            showlocals=self.config.getoption(\"showlocals\", False),\n-            style=style,\n-            tbfilter=False,  # pruned already, or in --fulltrace mode.\n-            truncate_locals=truncate_locals,\n-        )\n+            return excinfo.getrepr(\n+                funcargs=True,\n+                abspath=abspath,\n+                showlocals=self.config.getoption(\"showlocals\", False),\n+                style=style,\n+                tbfilter=False,  # pruned already, or in --fulltrace mode.\n+                truncate_locals=truncate_locals,\n+            )\n \n     def repr_failure(\n         self, excinfo, style=None\n",
    "final_iteration": 3,
    "buggy_methods": [
        "src/_pytest/nodes.py::_repr_failure_py"
    ],
    "num_buggy_methods": 1
}