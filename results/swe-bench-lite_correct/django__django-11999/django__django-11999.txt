diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,8 +763,9 @@
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            display_method_name = 'get_%s_display' % self.name
+            if not hasattr(cls, display_method_name):
+                setattr(cls, display_method_name, partialmethod(cls._get_FIELD_display, field=self))
 
     def get_filter_kwargs_for_object(self, obj):
         """
@@ -1186,17 +1187,26 @@
         else:
             return super().pre_save(model_instance, add)
 
-    def contribute_to_class(self, cls, name, **kwargs):
-        super().contribute_to_class(cls, name, **kwargs)
-        if not self.null:
-            setattr(
-                cls, 'get_next_by_%s' % self.name,
-                partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
-            )
-            setattr(
-                cls, 'get_previous_by_%s' % self.name,
-                partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
-            )
+    def contribute_to_class(self, cls, name, private_only=False):
+        """
+        Register the field with the model class it belongs to.
+
+        If private_only is True, create a separate instance of this field
+        for every subclass of cls, even if cls is not an abstract model.
+        """
+        self.set_attributes_from_name(name)
+        self.model = cls
+        cls._meta.add_field(self, private=private_only)
+        if self.column:
+            # Don't override classmethods with the descriptor. This means that
+            # if you have a classmethod and a field with the same name, then
+            # such fields can't be deferred (we don't have a check for this).
+            if not getattr(cls, self.attname, None):
+                setattr(cls, self.attname, self.descriptor_class(self))
+        if self.choices is not None:
+            display_method_name = 'get_%s_display' % self.name
+            if not hasattr(cls, display_method_name):
+                setattr(cls, display_method_name, partialmethod(cls._get_FIELD_display, field=self))
 
     def get_prep_value(self, value):
         value = super().get_prep_value(value)
@@ -2354,13 +2364,26 @@
             value = connection.ops.validate_autopk_value(value)
         return value
 
-    def contribute_to_class(self, cls, name, **kwargs):
-        assert not cls._meta.auto_field, (
-            "Model %s can't have more than one auto-generated field."
-            % cls._meta.label
-        )
-        super().contribute_to_class(cls, name, **kwargs)
-        cls._meta.auto_field = self
+    def contribute_to_class(self, cls, name, private_only=False):
+        """
+        Register the field with the model class it belongs to.
+
+        If private_only is True, create a separate instance of this field
+        for every subclass of cls, even if cls is not an abstract model.
+        """
+        self.set_attributes_from_name(name)
+        self.model = cls
+        cls._meta.add_field(self, private=private_only)
+        if self.column:
+            # Don't override classmethods with the descriptor. This means that
+            # if you have a classmethod and a field with the same name, then
+            # such fields can't be deferred (we don't have a check for this).
+            if not getattr(cls, self.attname, None):
+                setattr(cls, self.attname, self.descriptor_class(self))
+        if self.choices is not None:
+            display_method_name = 'get_%s_display' % self.name
+            if not hasattr(cls, display_method_name):
+                setattr(cls, display_method_name, partialmethod(cls._get_FIELD_display, field=self))
 
     def formfield(self, **kwargs):
         return None
