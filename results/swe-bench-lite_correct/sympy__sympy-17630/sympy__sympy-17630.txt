diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -613,19 +613,16 @@
             if cls == Mul:
                 for i in range(len(matrices)):
                     if not matrices[i].is_MatrixExpr:
-                        # If one of the matrices explicit, absorb the scalar into it
+                        # If one of the matrices is explicit, absorb the scalar into it
                         # (doit will combine all explicit matrices into one, so it
                         # doesn't matter which)
                         matrices[i] = matrices[i].__mul__(cls._from_args(nonmatrices))
                         nonmatrices = []
                         break
 
-            else:
-                # Maintain the ability to create Add(scalar, matrix) without
-                # raising an exception. That way different algorithms can
-                # replace matrix expressions with non-commutative symbols to
-                # manipulate them like non-commutative scalars.
-                return cls._from_args(nonmatrices + [mat_class(*matrices).doit(deep=False)])
+        # Handle case where all matrices are ZeroMatrix
+        if all(isinstance(m, ZeroMatrix) for m in matrices):
+            return ZeroMatrix(*matrices[0].shape)
 
         return mat_class(cls._from_args(nonmatrices), *matrices).doit(deep=False)
     return _postprocessor
