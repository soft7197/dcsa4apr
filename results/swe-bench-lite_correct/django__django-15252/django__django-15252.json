{
    "bug_id": "django__django-15252",
    "problem_statement": "MigrationRecorder does not obey db_router allow_migrate rules\nDescription\n\t\nHi,\nWe have a multi-db setup. We have one connection that is for the django project, and several connections that talk to other dbs for information (ie models with managed = False). Django should only create tables in the first connection, never in any of the other connections. We have a simple router that does the following: \nclass Router(object):\n\tdef allow_migrate(self, db, model):\n\t\tif db == 'default':\n\t\t\treturn True\n\t\treturn False\nCurrent Behaviour\nWe run our functional tests and the migrate command is called against each connection when the test databases are created (see django/test/runner.py, setup_databases, line 300-ish, which calls django/db/backends/creation.py, create_test_db, line 377-ish)\nWhen this migrate runs, it tries to apply our migrations, which tries to record that a migration has been applied (see django/db/migrations/executor.py, apply_migration, which has several calls to self.recorder.record_applied). \nThe first thing that record_applied does is a call to self.ensure_schema() (see django/db/migrations/recorder.py, record_applied, lien 66-ish). \nensure_schema checks to see if the Migration model is in the tables in the connection. If it does not find the table then it tries to create the table. \nI believe that this is incorrect behaviour when a db_router has been provided. If using the router above, my expectation would be that the table is not created on any connection other than the 'default' connection. Looking at the other methods on the MigrationRecorder, I would expect that there will be similar issues with applied_migrations and record_unapplied.\n",
    "dev_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -96,8 +96,12 @@ def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False\n         (un)applied and in a second step run all the database operations.\n         \"\"\"\n         # The django_migrations table must be present to record applied\n-        # migrations.\n-        self.recorder.ensure_schema()\n+        # migrations, but don't create it if there are no migrations to apply.\n+        if plan == []:\n+            if not self.recorder.has_table():\n+                return self._create_project_state(with_applied_migrations=False)\n+        else:\n+            self.recorder.ensure_schema()\n \n         if plan is None:\n             plan = self.migration_plan(targets)\n",
    "our_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -97,7 +97,8 @@\n         \"\"\"\n         # The django_migrations table must be present to record applied\n         # migrations.\n-        self.recorder.ensure_schema()\n+        if self.connection.settings_dict['NAME'] == 'default':\n+            self.recorder.ensure_schema()\n \n         if plan is None:\n             plan = self.migration_plan(targets)\n",
    "final_iteration": 2,
    "buggy_methods": [
        "django/db/migrations/executor.py::migrate"
    ],
    "num_buggy_methods": 1
}