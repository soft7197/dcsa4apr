{
    "bug_id": "sphinx-doc__sphinx-7975",
    "problem_statement": "Two sections called Symbols in index\nWhen using index entries with the following leading characters: _@_, _£_, and _←_ I get two sections called _Symbols_ in the HTML output, the first containing all _@_ entries before ”normal” words and the second containing _£_ and _←_ entries after the ”normal” words.  Both have the same anchor in HTML so the links at the top of the index page contain two _Symbols_ links, one before the letters and one after, but both lead to the first section.\n\n",
    "dev_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -98,9 +98,8 @@ def keyfunc0(entry: Tuple[str, str]) -> Tuple[bool, str]:\n             for subentry in indexentry[1].values():\n                 subentry[0].sort(key=keyfunc0)  # type: ignore\n \n-        # sort the index entries; put all symbols at the front, even those\n-        # following the letters in ASCII, this is where the chr(127) comes from\n-        def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n+        # sort the index entries\n+        def keyfunc(entry: Tuple[str, List]) -> Tuple[Tuple[int, str], str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n                 # using specified category key to sort\n@@ -108,11 +107,16 @@ def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n+\n             if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n+                # put non-symbol characters at the folloing group (1)\n+                sortkey = (1, lckey)\n+            else:\n+                # put symbols at the front of the index (0)\n+                sortkey = (0, lckey)\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n-            return (lckey, entry[0])\n+            return (sortkey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n \n         if group_entries:\n",
    "our_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,9 +108,11 @@\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n-                lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n+            # Change the condition to put all symbols, not just those starting with '_',\n+            # at the front\n+            if not lckey[0:1].isalpha():\n+                lckey = chr(31) + lckey  # Use a prefix that ensures symbols come first\n+            # ensure a deterministic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n",
    "final_iteration": 1,
    "buggy_methods": [
        "sphinx/environment/adapters/indexentries.py::keyfunc0",
        "sphinx/environment/adapters/indexentries.py::keyfunc"
    ],
    "num_buggy_methods": 2
}